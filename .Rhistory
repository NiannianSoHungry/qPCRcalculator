# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
# Set options here
options(golem.app.prod = FALSE) # TRUE = production mode, FALSE = development mode
# Comment this if you don't want the app to be served on a random port
options(shiny.port = httpuv::randomPort())
# Detach all loaded packages and clean your environment
golem::detach_all_attached()
# Document and reload your package
golem::document_and_reload()
# Run the application
run_app()
golem::use_recommended_deps(recommended = c("bslib", "dplyr", "ggplot2", "ggsignif", "ggbeeswarm"))
library(electricShine)
buidPath <- tempdir()
getwd()
my_package <- getwd()
library(electricShine)
buildPath <- tempdir()
my_package <- getwd()
electricShine::electrify(
app_name = "qPCR 计算器",
short_description = "qPCR Calculator",
semantic_version = "1.0.0",
build_path = buildPath,
cran_like_url = "https://mirrors.tuna.tsinghua.edu.cn/CRAN/",
function_name = "run_app",
local_package_path = my_package,
package_install_opts = list(type = "binary"),
nodejs_path = file.path("D:\Program Files\nodejs")
electricShine::electrify(
app_name = "qPCR 计算器",
short_description = "qPCR Calculator",
semantic_version = "1.0.0",
build_path = buildPath,
cran_like_url = "https://mirrors.tuna.tsinghua.edu.cn/CRAN/",
function_name = "run_app",
local_package_path = my_package,
package_install_opts = list(type = "binary"),
nodejs_path = file.path("D:\\Program Files\\nodejs")
)
electricShine::electrify(
app_name = "qPCR 计算器",
short_description = "qPCR Calculator",
semantic_version = "1.0.0",
build_path = buildPath,
cran_like_url = "https://mirrors.tuna.tsinghua.edu.cn/CRAN/",
function_name = "run_app",
local_package_path = my_package,
package_install_opts = list(type = "binary"),
nodejs_path = file.path("D:\\Program Files\\nodejs")
)
electricShine::electrify(
app_name = "qPCR 计算器",
short_description = "qPCR Calculator",
semantic_version = "1.0.0",
build_path = buildPath,
cran_like_url = "https://mirrors.tuna.tsinghua.edu.cn/CRAN/",
function_name = "run_app",
local_package_path = my_package,
package_install_opts = list(type = "binary"),
nodejs_path = file.path("D:\\Program Files\\nodejs")
)
library(electricShine)
buildPath <- tempdir()
my_package <- getwd()
electricShine::electrify(
app_name = "qPCR 计算器",
short_description = "qPCR Calculator",
semantic_version = "1.0.0",
build_path = buildPath,
cran_like_url = "https://mirrors.tuna.tsinghua.edu.cn/CRAN/",
function_name = "run_app",
local_package_path = my_package,
package_install_opts = list(type = "binary"),
nodejs_path = file.path("D:\\Program Files\\nodejs")
)
install.packages("glue")
install.packages("glue")
?install.packages("glue")
devtools::install_version("glue", version = "1.6.2")
electricShine::electrify(
app_name = "qPCR 计算器",
short_description = "qPCR Calculator",
semantic_version = "1.0.0",
build_path = buildPath,
cran_like_url = "https://mirrors.tuna.tsinghua.edu.cn/CRAN/",
function_name = "run_app",
local_package_path = my_package,
package_install_opts = list(type = "binary"),
nodejs_path = file.path("D:\\Program Files\\nodejs")
)
library(electricShine)
buildPath <- tempdir()
my_package <- getwd()
electricShine::electrify(
app_name = "qPCR 计算器",
short_description = "qPCR Calculator",
semantic_version = "1.0.0",
build_path = buildPath,
cran_like_url = "https://mirrors.tuna.tsinghua.edu.cn/CRAN/",
function_name = "run_app",
local_package_path = my_package,
package_install_opts = list(type = "binary"),
nodejs_path = file.path("D:\\Program Files\\nodejs")
)
library(electricShine)
buildPath <- tempdir()
my_package <- getwd()
electricShine::electrify(
app_name = "qPCR 计算器",
short_description = "qPCR Calculator",
semantic_version = "1.0.0",
build_path = buildPath,
cran_like_url = "https://mirrors.tuna.tsinghua.edu.cn/CRAN/",
function_name = "run_app",
local_package_path = my_package,
package_install_opts = list(type = "binary"),
# nodejs_path = file.path("D:\\Program Files\\nodejs")
)
platform <- "win"
arch <- "x64"
